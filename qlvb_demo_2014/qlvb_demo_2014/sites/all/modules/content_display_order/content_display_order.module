<?php
// $Id: content_display_order.module,v 1.1 2010/04/30 13:09:17 skilip Exp $

/**
 * @file
 *
 * Rearrange the display order of CCK fields
 */

/**
 * Implementation of hook_menu().
 */
function  content_display_order_menu() {
  $items = array();
  foreach (node_get_types() as $type) {
    $type_name = $type->type;
    $content_type = content_types($type_name);
    $type_url_str = $content_type['url_str'];
    $items['admin/content/node-type/'. $type_url_str .'/order'] = array(
      'title' => 'Display order',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('content_display_order_form', $type_name),
      'access arguments' => array('administer content types'),
      'file' => 'content_display_order.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
    $contexts = content_build_modes('_tabs');
    foreach ($contexts as $key => $tab) {
      $items['admin/content/node-type/'. $type_url_str .'/order/'. $key] = array(
        'title' => $tab['title'],
        'page arguments' => array('content_display_order_form', $type_name, $key),
        'access arguments' => array('administer content types'),
        'type' => $key == 'basic' ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'weight' => $key == 'basic' ? 0 : 1,
      );
    }
  }
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function content_display_order_theme() {
  return array(
    'content_display_order_form' => array(
      'arguments' => array('form'),
      'file' => 'content_display_order.admin.inc',
    ),
  );
}

/**
 *
 */
function content_display_order_nodeapi(&$node, $op, $a3, $a4) {
  if ($op == 'view') {
    $node->content['#pre_render'][] = 'content_display_order_alter_weights';
    $node->content['#type_name'] = $node->type;
    $node->content['#build_mode'] = ($node->build_mode !== NODE_BUILD_NORMAL ? $node->build_mode : ($a3 ? 'teaser' : 'full'));
  }
}

/**
 * Pre-render callback to adjust weights.
 */
function content_display_order_alter_weights($elements) {
  $type_name = $elements['#type_name'];
  $type = content_types($type_name);
  $fields = $type['fields'];
  $context = $elements['#build_mode'];
  $extra = variable_get("content_extra_display_order_$type_name", array());

  $groups = array();
  if (module_exists('fieldgroup')) {
    $groups = fieldgroup_groups($type['type']);
  }

  // Render groups if any
  foreach ($groups as $name => $group) {
    if (isset($group['settings']['display'][$context]['weight'])) {
      $elements[$name]['#weight'] = $group['settings']['display'][$context]['weight'];
    }
  }

  // CCK fields
  foreach ($fields as $name => $field) {
    $weight = $field['display_settings'][$context]['weight'];

    // If a parent is set in the display settings, and the field group exstists...
    if (isset($field['display_settings'][$context]['parent'])) {

      $parent = $field['display_settings'][$context]['parent'];

      if (!empty($parent) && !$elements[$parent]['group'][$name]) {
        // If the parent value is not empty, the field must be placed inside a group.
        // If the group isn't yet present in the target fieldgroup tree, the field  currenty resides inside another fieldgroup.
        foreach (array_keys($groups) as $group_name) {
          if ($elements[$group_name]['group'][$name]) {
            $elements[$parent]['group'][$name] = $elements[$group_name]['group'][$name];
            unset($elements[$group_name]['group'][$name]);
            break;
          }
        }
      }
      elseif ($parent === '' && !$elements[$name]) {
        // If the parent value is an empty string, the field should be placed inside the root.
        // If the field isn't yet present in the root tree, the field currently resides inside a group.
        foreach (array_keys($groups) as $group_name) {
          if ($elements[$group_name]['group'][$name]) {
            $elements[$name] = $elements[$group_name]['group'][$name];
            unset($elements[$group_name]['group'][$name]);
          }
        }
      }
    }

    if ($weight !== NULL) {
      if ($parent && $elements[$parent]['group'][$name]) {
        $elements[$parent]['group'][$name]['#weight'] = $weight;
      }
      else {
        $elements[$name]['#weight'] = $weight;
      }
    }
  }

  if (isset($elements['#content_extra_fields'])) {
    foreach ($elements['#content_extra_fields'] as $name => $value) {
      if (isset($value['view']) && isset($elements[$value['view']])) {
        $elements[$value['view']]['#weight'] = ($extra[$context][$name] ? $extra[$context][$name] : $value['weight']);
      }
    }
  }
  return $elements;
}

/**
 * Implementation of hook_form_content_display_overview_form_alter().
 * Used to add extra fields to the content display overfiew form which are
 * needed to retain information about the diplay order after submitting the form.
 */
function content_display_order_form_content_display_overview_form_alter(&$form, &$form_state) {
  $type = content_types($form['#type_name']);
  $fields = $type['fields'];
  $contexts = content_build_modes($form['#contexts']);

  foreach ($form['#fields'] as $name) {
    foreach (array_keys($contexts) as $context) {
      $form[$name][$context]['weight'] = array('#type' => 'hidden', '#value' => $fields[$name]['display_settings'][$context]['weight']);
      $form[$name][$context]['parent'] = array('#type' => 'hidden', '#value' => $fields[$name]['display_settings'][$context]['parent']);
    }
  }

  if (module_exists('fieldgroup')) {
    $groups = fieldgroup_groups($type['type']);

    foreach ($form['#groups'] as $name) {
      foreach (array_keys($contexts) as $context) {
        $form[$name][$context]['weight'] = array('#type' => 'hidden', '#value' => $groups[$name]['settings']['display'][$context]['weight']);
      }
    }
  }
}