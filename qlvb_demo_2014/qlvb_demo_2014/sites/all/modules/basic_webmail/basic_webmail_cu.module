<?php

/**
 * @description
 * This is the main code file for the Basic webmail module.
 * This module allows users to send and receive e-mail through an IMAP mail
 * server with a web based user interface.
 */
define("SIGN_KEY", "Drupal_EGOV_QLVB_BG_2012_2909");
define("ICOM_DOC_KEY", "Drupal_Document_Integrity_Graduate_QLVB_BG_2012_1709");
require_once 'libs/imap.class.php';
require_once 'libs/imap_mail.class.php';
/* * *******************************************************
 *
 *  Implementation of Drupal hooks.
 *
 *  ***************************************************** */

/**
 * Impementation hook_nodeapi
 * Enter description here ...
 * @param unknown_type $node
 * @param unknown_type $op
 * @param unknown_type $arg
 * @author truongnx.ithut@gmail.com
 */
function basic_webmail_nodeapi(&$node, $op, $arg = 0) {
  switch ($op) {
    case 'presave' :
      if($node->type == '004_vanbandi'){
         _basic_webmail_vbdi_presave($node);
         return;
      }     
      break;
    case 'insert' :
    case 'update' :
      break;
  }
}

/**
 * 
 */
function basic_webmail_add_js(){
  drupal_add_css(drupal_get_path('module', 'basic_webmail') . '/css/basic_webmail.css');
  drupal_add_css(drupal_get_path('module', 'basic_webmail') . '/css/dtree.css');
  //add js
  $setting = array('imagePath' => '/' . drupal_get_path('module', 'basic_webmail') . '/images');
  drupal_add_js(array('basic_webmail' => $setting), 'setting');
  drupal_add_js(drupal_get_path('module', 'basic_webmail') . '/js/jquery.blockUI.js');
  drupal_add_js(drupal_get_path('module', 'basic_webmail') . '/js/bwbblockpage.js');
  drupal_add_js(drupal_get_path('module', 'basic_webmail') . '/js/dtree.js');
  drupal_add_js(drupal_get_path('module', 'basic_webmail') . '/js/bwmlmb.0207020412.js');
}
/**
 * Implementation of hook_help().
 */
function basic_webmail_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/settings/basic_webmail':
      $output = t('Send and receive e-mail through an IMAP mail server.');
      break;
  }
  return $output;
}

//  End of basic_webmail_help().

/**
 * Implementation of hook_perm().
 */
function basic_webmail_perm() {
  return array('administer basic_webmail', 'access basic_webmail');
}

//  End of basic_webmail_perm().

/**
 * Implementation of hook_menu().
 */
function basic_webmail_menu() {
  $items = array();
  // Admin settings.
  $items['admin/settings/basic_webmail'] = array(
      'title' => 'Basic webmail',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('basic_webmail_admin_settings'),
      'file' => 'basic_webmail_admin_settings.inc',
      'access arguments' => array('administer basic_webmail'),
      'description' => 'Configure the mail server.',
  );

  global $user;
  if ($user->uid) {

    // The main mail listing page.
    $items['basic_webmail'] = array(
        'title' => 'E-mail',
        'page callback' => 'basic_webmail_mail_list',
        'description' => 'Send and/or receive e-mail.',
        'access arguments' => array('access basic_webmail'),
        'file' => 'basic_webmail_mail_list.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['basic_webmail/batch_import'] = array(
        'page callback' => 'basic_webmail_mail_batch_import',
        'access arguments' => array('access basic_webmail'),
        'type' => MENU_CALLBACK,
        'file' => 'basic_webmail_batch_import.inc'
    );
    // The message view page.
    $items['basic_webmail/message'] = array(
        'page callback' => 'basic_webmail_message',
        'access arguments' => array('access basic_webmail'),
        'file' => 'basic_webmail_message.inc',
        'type' => MENU_CALLBACK,
    );
    // The compose message page.
    $items['basic_webmail/sendmail'] = array(
        'page callback' => 'basic_webmail_send_mail',
        'access arguments' => array('access basic_webmail'),
        'file' => 'basic_webmail_send_mail.inc',
        'type' => MENU_CALLBACK,
    );
    // The delete message confirmation page.
    $items['basic_webmail/delete'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('_basic_webmail_delete_message_form'),
        'access arguments' => array('access basic_webmail'),
        'type' => MENU_CALLBACK,
    );
    // The copy message page.
    $items['basic_webmail/copy'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('_basic_webmail_copy_message_form'),
        'access arguments' => array('access basic_webmail'),
        'type' => MENU_CALLBACK,
    );
    // The move message page.
    $items['basic_webmail/move'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('_basic_webmail_move_message_form'),
        'access arguments' => array('access basic_webmail'),
        'type' => MENU_CALLBACK,
    );
    // Show e-mail matches when filling in the forms.
    $items['basic_webmail/autocomplete'] = array(
        'title' => 'Basic webmail autocomplete',
        'page callback' => 'basic_webmail_autocomplete',
        'access arguments' => array('access basic_webmail'),
        'type' => MENU_CALLBACK
    );
    // Implementation AJAX request
    $items['basic_webmail/ajax/request'] = array(
        'page callback' => 'basic_webmail_ajax_response',
        'access arguments' => array('access basic_webmail'),
        'file' => 'basic_webmail_ajax_response.inc',
        'type' => MENU_CALLBACK
    );
  }
  return $items;
}

//  End of basic_webmail_menu().

/**
 * Implementation of hook_user().
 */
function basic_webmail_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      if ($category == 'account' && user_access('access basic_webmail')) {
        $form['basic_webmail_email_settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('Basic webmail account settings'),
            '#collapsible' => TRUE,
            '#weight' => 1,
        );
        $form['basic_webmail_email_settings']['basic_webmail_username'] = array(
            '#type' => 'textfield',
            '#title' => t('E-mail account login'),
            '#default_value' => $account->basic_webmail_username,
            '#description' => t('The login id of your e-mail account.'),
            '#required' => TRUE,
        );
        $form['basic_webmail_email_settings']['basic_webmail_passsword'] = array(
            '#type' => 'password_confirm',
            '#description' => t('The login password of your e-mail account.'),
        );
      }
      return $form;
      break;

    case 'insert':
      $edit['basic_webmail_username'] = $edit['mail'];
      $edit['basic_webmail_passsword'] = $edit['pass'];
      break;

    case 'register':
      if (user_access('access basic_webmail')) {
        $form['basic_webmail_email_settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('Basic webmail account settings'),
            '#collapsible' => TRUE,
            '#weight' => 1,
        );
        $form['basic_webmail_email_settings']['basic_webmail_username'] = array(
            '#type' => 'textfield',
            '#title' => t('E-mail account login'),
            '#default_value' => $account->basic_webmail_username,
            '#description' => t('The login id of your e-mail account.'),
            '#required' => TRUE,
        );
        $form['basic_webmail_email_settings']['basic_webmail_passsword'] = array(
            '#type' => 'password_confirm',
            '#description' => t('The login password of your e-mail account.'),
        );
      }
      return $form;
      break;

    case 'update':
      break;
  }
}

//  End of basic_webmail_user().
/**
 * Implementation of hook_theme().
 */
function basic_webmail_theme() {
  return array(
      'basic_webmail_mail_list_form' => array(
          'arguments' => array(
              'form' => NULL,
          ),
      ),
  );
}

//  End of basic_webmail_theme().



/** * ******************************************************
 *
 *  The main functions of the module.
 *
 *  ***************************************************** */


function _basic_webmail_vbdi_presave(&$node){
    
    Global $user;
    //Get all email from user entered.
    $lst_email = _basic_webmail_all_email($node->field_004_diachiemail[0]['value']);
    
    // Get email which exist on our contacts.
    $intern_email=array();
    if(!empty($lst_email)){
      $lst_email =  array_unique($lst_email);
      $placeholder = db_placeholders($lst_email, 'text');
      $intern_email = db_result(db_query("SELECT GROUP_CONCAT(e.field_009_email_value SEPARATOR ',') email 
                                          FROM {content_type_009_danhba} e 
                                          WHERE e.field_009_email_value IN($placeholder)", $lst_email));
      $intern_email =  array_filter(explode(',', $intern_email));
    }
    
    
    // Get contact ID of $intern_email if exist.
    $intern_email_id=array();
    if(!empty($intern_email)){
      $placeholder = db_placeholders($intern_email, 'text');
      $intern_email_id = db_result(
                           db_query("SELECT GROUP_CONCAT(e.nid SEPARATOR ',') email 
                                     FROM {content_type_009_danhba} e 
                                     WHERE e.field_009_email_value IN($placeholder)", $intern_email)
                                  );
      $intern_email_id = array_filter(explode(',', $intern_email_id));
    }
    
    // Get email that does not exitst on our contacts
    $extern_email = array_diff($lst_email, $intern_email);
    
    // Get emails which this node has been sent to.
    $old_email_id = array();    
    // Náº¿u edit
    if($node->nid){
        // Get old nid
        $field_004_dvnhanemail_nid=db_result(db_query("SELECT GROUP_CONCAT(d.field_004_dvnhanemail_nid SEPARATOR ',') 
                                                       FROM {content_field_004_dvnhanemail} d  WHERE d.nid =%d", $node->nid));
        if($field_004_dvnhanemail_nid){
            $old_email_id=array_filter(explode(',', $field_004_dvnhanemail_nid));
        }        
    }
    $new_email_id= array();
    foreach ($node->field_004_dvnhanemail as $item) {      
      if($item['nid']){
          $new_email_id[] = $item['nid'];
      }
      
    }    
    // At this time we have
    // 1. $intern_email_id : Email ID enter by end-user by autocomplete field
    // 2. $extern_email    : Email address enter by end-user
    // 3. $old_email_id    : Email ID has sent to 
    // 4. $new_email_id    : Email ID that end-user have just entered by checked to checkboxes
    // Add Email ID enter by end-user in autocomplete field
    $add_email_id=array_diff($intern_email_id,$new_email_id);
    foreach ($add_email_id as $item) {
        $node->field_004_dvnhanemail[] = array('nid' => $item);
    }
    // Set empty email address autocomplete and resent field
    $is_resend = $node->field_004_guilai[0]['value'];
    $node->field_004_diachiemail[0]['value'] = '';
    $node->field_004_guilai [0] ['value'] = 0;
    
    
    // Check whether allowed sent email or not		
    $is_allowed_send = (variable_get('basic_webmail_wfsate_sendmail', 19) == $node->workflow) ? TRUE : FALSE;
    if (!$is_allowed_send) {
      return;
    }
    
    // Starting sending email , it's an important part 
    // If not resent 
    if (!$is_resend) {
      $new_email_id=  array_diff($new_email_id, $old_email_id);
    }
    $list_email_id = array_merge($new_email_id, $intern_email_id);    
    // If there is no email to send
    if (empty($list_email_id) && empty($extern_email)) {
      return;
    }
    
    //check smtp server
    if (variable_get('basic_webmail_smtp_server', '') == '' || variable_get('basic_webmail_smtp_port', '') == '') {
      drupal_set_message('ChÆ°a cáº¥u hÃ¬nh mÃ¡y chá»§ SMTP', 'error');
      return;
    }
    //check the username and password for connection
    if (!$user->basic_webmail_username || !$user->basic_webmail_passsword) {
      drupal_set_message('ChÆ°a cáº¥u hÃ¬nh tÃ i khoáº£n truy cáº­p mÃ¡y chá»§ SMTP', 'error');
      return;
    }
    
    // Get the users e-mail login and password.
    require_once 'libs/class.phpmailer.php';
    require_once 'libs/class.smtp.php';
    $username = $user->basic_webmail_username;
    $password = $user->basic_webmail_passsword;
    $email_name = variable_get('basic_webmail_email_name', '');
    $server_address = variable_get('basic_webmail_smtp_server', '');
    $server_port = variable_get('basic_webmail_smtp_port', 25);
    //create new object PHPMailer
    $mail = new PHPMailer (); // defaults to using php "mail()"	
    $mail->IsSMTP(); // send via SMTP
    $mail->Host = $server_address; // SMTP servers
    $mail->port = $server_port; //SMTP port
    $mail->SMTPAuth = true; // turn on/off SMTP authentication
    $mail->Username = $username;
    $mail->Password = $password;
    $mail->CharSet = "utf-8";
    $mail->XMailer = 'E-GOV-QLVB-2012';
    $mail->SetFrom($username, $email_name);
    $mail->Subject = '[QLVB-Email]' . $node->title;
    $body = _basic_webmail_create_body($node);
    $mail->MsgHTML($body);    
    // Add email address from our contacts
    if (!empty($list_email_id)) {
      $placeholder = db_placeholders($list_email_id, 'int');
      $result = db_query("SELECT d.field_009_ten_value name,d.field_009_email_value email 
                          FROM {content_type_009_danhba} d 
                          WHERE d.nid in($placeholder)", $list_email_id);
                                 

      while ($item = db_fetch_object($result)) {
        $mail->AddAddress($item->email, $item->name);
      }
    }
    // Add email address from external email
    foreach ($extern_email as $item) {
        $mail->AddAddress($item);
    }
    
    //add attachment file
    foreach ($node->field_004_file_vbdi as $item) {
      $mime = module_exists('mimedetect') ? mimedetect_mime($item['filepath']) : file_get_mimetype($item['filepath']);
      $mail->AddAttachment($item['filepath'],'','base64',$mime);
    }
    
    // Sent mail here
    if (!$mail->Send()) {
      drupal_set_message("CÃ³ lá»i khi gá»­i mail: " . $mail->ErrorInfo, "error");
    } else {
      drupal_set_message("ÄÃ£ gá»­i email thÃ nh cÃ´ng!");
    }
   
}


/**
 * Automatically fills in e-mail addresses of the current users.
 */
function basic_webmail_autocomplete($string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $array = drupal_explode_tags($string);
  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array();

  if ($last_string != '') {
    // Search the users table for all e-mail addresses which are similar to
    // the last item in the list.
    $result = db_query_range("SELECT d.field_009_ten_value as name, d.field_009_email_value as email FROM  {content_type_009_danhba} d 
                              WHERE  LOWER(d.field_009_ten_value) LIKE LOWER('%%%s%%') 
                              OR     LOWER(d.field_009_email_value) LIKE LOWER('%%%s%%')
                              OR     LOWER(d.field_009_tentat_value) LIKE LOWER('%%%s%%') ", $last_string, $last_string,$last_string, 0, 15);

    // Convert what's left of the array to a string.
    $prefix = count($array) ? implode(', ', $array) . ', ' : '';
    // Iterate through the list of similar e-mail addresses.
    while ($tag = db_fetch_object($result)) {
      $n = "$tag->name <$tag->email>";
      // Add the e-mail address to the list of possible matches.
      // $matches[$prefix . $n] = check_plain($tag->mail);
      $matches[$prefix . $n] = "$tag->name ($tag->email)";
    }
  }

  // Send the results back.
  drupal_json($matches);
}

//  End of basic_webmail_autocomplete().

/**
 * Create content type of 003_vanbanden.
 * @param $node
 * @param $file_gan
 * @author truongnx.ithut@gmail.com
 * @modify 04/05/2012
 * @modify 23/07/2012 : Add new contact to 009_danhba content type
 */
function basic_webmail_create_vbd($node, $files = array()) {
  global $user;
  
  // If it doesn't exist then create new contact  
  $newNode = new StdClass ();
  $newNode->type = '003_vanbanden';
  $newNode->title = $node ['title'];
  $newNode->uid = $user->uid;    
  $newNode->field_003_ngayvbden [0] ['value'] = date('c');
  $newNode->field_003_hanxl_vbd [0] ['value'] = date('c');
  $newNode->field_003_loaivbd [0] ['value'] = $node ['field_003_loaivbd'];
  $newNode->field_003_sokyhieu [0] ['value'] = $node ['field_003_sokyhieu'];
  $newNode->field_003_nam [0] ['value'] = $node ['field_003_nam'];
  $newNode->field_003_capcq_banhanh [0] ['value'] = 9;
  $newNode->field_003_yeucau_trinhgd [0] ['value'] = 1;
  $newNode->field_003_dokhan[0]['value']=1;
  $newNode->field_003_tuemail [0] ['value'] = 1;
  $newNode->field_003_dvguivb_text[0]['value']=trim($node['name']);
  
  foreach ($files as $idx => $item) {
    $newNode->field_003_fileganvbd [$idx] = _basic_webmail_create_field_fileganvbd($item, $newNode);
  }
  node_save($newNode);
  return $newNode->nid;
}

/**
 * 
 * Get mailbox list 
 * @param unknown_type $obj
 * @param unknown_type $reset
 * @author truongnx.ithut@gmail.com
 */
function basic_webmail_get_mailbox($obj = NULL, $reset = FALSE) {
  Global $user;
  static $mailbox;
  //neu can reset hoac chua ton tai $mailbox
  if (!isset($mailbox) || $reset) {
    if (!$reset && ($cache = cache_get('basic_webmail_mailbox_' . $user->uid)) && !empty($cache->data) && $cache->expire > time()) {
      $mailbox = $cache->data;
    } else {
      if (!$obj) {
        $obj = _basic_webmail_open_connect();
      }
      if (!$obj) {
        return FALSE;
      }
      $folders = $obj->get_folders();
      if (!$folders)
        return FALSE;
      $list = array();
      $idx = 5;
      foreach ($folders as $item) {
        if (preg_match('/^{.*}\s*(.*)\s*$/', $item, $m)) {
          $name = mb_convert_encoding($m [1], 'UTF-8', 'UTF7-IMAP');
          switch (strtolower($name)) {
            case 'inbox' :
              $list [1] = $name;
              break;
            case 'há»p thÆ° Äi' :
              $list [2] = $name;
              break;
            case 'thÆ° nhÃ¡p' :
              $list [3] = $name;
              break;
            case 'thÃ¹ng rÃ¡c' :
              $list [4] = $name;
              break;
            default :
              $list [$idx] = $name;
              $idx++;
              break;
          }
        }
      }
      if (!isset($list [2])) {
        $folder_name = mb_convert_encoding('Há»p thÆ° Äi', 'UTF7-IMAP', 'UTF-8');
        if (!$obj->add_folder($folder_name)) {
          watchdog('basic_webmail', 'KhÃ´ng thá» táº¡o mailbox Há»p thÆ° Äi', array(), WATCHDOG_ERROR);
          return FALSE;
        }
      }
      if (!isset($list [3])) {
        $folder_name = mb_convert_encoding('ThÆ° nhÃ¡p', 'UTF7-IMAP', 'UTF-8');
        if (!$obj->add_folder($folder_name)) {
          watchdog('basic_webmail', 'KhÃ´ng thá» táº¡o mailbox ThÆ° nhÃ¡p ', array(), WATCHDOG_ERROR);
          return FALSE;
        }
      }
      if (!isset($list [4])) {
        $folder_name = mb_convert_encoding('ThÃ¹ng rÃ¡c', 'UTF7-IMAP', 'UTF-8');
        if (!$obj->add_folder($folder_name)) {
          watchdog('basic_webmail', 'KhÃ´ng thá» táº¡o mailbox ThÃ¹ng rÃ¡c', array(), WATCHDOG_ERROR);
          return FALSE;
        }
      }
      ksort($list);
      $delimiter = '/';
      $mailbox = array();
      $mailbox [0] = array('id' => 0, 'fullname' => '', 'name' => ' <strong>  ThÆ° má»¥c </strong> ', 'parent' => - 1, 'link' => '', 'alias' => '<strong>  ThÆ° má»¥c </strong> ');
      foreach ($list as $idx => $item) {
        $mb = array('id' => $idx, 'fullname' => $item, 'link' => '/basic_webmail/mailbox/' . $idx);
        if (strrpos($item, $delimiter)) {
          $h = explode($delimiter, $item);
          $mb ['name'] = array_pop($h);
          $parent = implode($delimiter, $h);
          foreach ($list as $key => $value) {
            if ($parent == $value) {
              $mb ['parent'] = $key;
              break;
            }
          }
        } else {
          $mb ['name'] = $item;
          $mb ['parent'] = 0;
        }
        switch (strtolower($mb ['name'])) {
          case 'inbox' :
            $mb ['alias'] = 'Há»p thÆ° Äáº¿n';
            break;
          default :
            $mb ['alias'] = $mb ['name'];
            break;
        }
        $mailbox [$idx] = $mb;
      }
      //rebuild every week
      $expire = time() + (7 * 24 * 60 * 60 );
      cache_set('basic_webmail_mailbox_' . $user->uid, $mailbox, 'cache', $expire);
      unset($obj);
    }
  }
  return $mailbox;
}

function basic_webmail_get_one_message($mid, $fid = 1, $obj = NULL) {
  Global $user;
  if (!$obj) {
    $mailbox = basic_webmail_get_mailbox();
    if (!isset($mailbox[$fid])) {
      return FALSE;
    }
    $box = $mailbox[$fid];
    $folder = mb_convert_encoding($box['fullname'], 'UTF7-IMAP', 'UTF-8');
    $obj = _basic_webmail_open_connect($folder);
  }
  if (!$obj) {
    drupal_set_message(t('There was an error connecting to the mail server. Contact the system administrator and/or check the logs for more information.'), 'error');
    return FALSE;
  }
  $msgno = imap_msgno($obj->mbox, $mid);
  $message_header = $obj->get_header($msgno);
  if (!$message_header) {
    drupal_set_message('Mail khÃ´ng tá»n táº¡i trÃªn mÃ¡y chá»§ IMAP', 'error');
    if (!db_query('DELETE FROM {basic_webmail_messages} WHERE user_id = %d AND mboxid = %d AND mid =%d ', $user->uid, $fid, $mid)) {
      watchdog('basic_webmail', 'Error :There was an error deleting one message records from the basic_webmail_messages table.', array(), WATCHDOG_ERROR);
    }
    return FALSE;
  }
  $message = array();
  $message ['subject'] = _basic_webmail_decode_mime_str($message_header->subject);
  $message ['fromaddress'] = $message_header->from [0];
  $message ['toaddress'] = $message_header->to;
  $message ['ccaddress'] = $message_header->cc;
  $message ['date'] = $message_header->date;
  $message ['attachments'] = array();
  $map = $obj->get_map($msgno);
  foreach ($map as $item) {
    // Process attach file part 
    if (($item ['part_object']->ifdisposition && $item ['part_object']->disposition == 'attachment')|| $item['part_object']->subtype=='OCTET-STREAM') {        
      $message_id = $obj->get_message_overview($msgno)->message_id;
      $file_dest = _basic_webmail_create_attach_folder(md5($message_id));
      if($item ['part_object']->ifdparameters){
          $parameters=$item ['part_object']->dparameters;
      }elseif($item ['part_object']->ifparameters){
           $parameters=$item ['part_object']->parameters;
      }      
      if(isset($parameters)){
          $file_name = $parameters[0]->value;
          $file_name=_basic_webmail_decode_mime_str($file_name);      
          if (preg_match('/\.(php|pl|py|cgi|asp|aspx|jsp|js)$/i', $file_name) && (substr($file_name, -4) != '.txt')) {
               $file_name .= '.txt';
          };
      }      
      $file_data = $obj->get_part($msgno, $item ['part_number']);
      $file_path = file_save_data($file_data, $file_dest . '/' . $file_name, FILE_EXISTS_REPLACE);
      $message ['attachments'] [] = $file_path;
      continue;
    }
    if ($item ['part_object']->subtype == 'PLAIN') {
      $message ['plain'] [] = $obj->get_part($msgno, $item ['part_number']);
      continue;
    }
    if ($item ['part_object']->subtype == 'HTML') {
      $message ['html'] [] = $obj->get_part($msgno, $item ['part_number']);
      continue;
    }
  }
  unset($obj);
  return $message;
}

/**
 * 
 * Enter description here ...
 */
function _basic_webmail_count_new($mailbox) {
  Global $user;
  $result = db_query("SELECT mboxid id,count(1) total 
		      FROM {basic_webmail_messages} 
	              WHERE user_id=%d AND mread=0 AND mboxid <> 0 GROUP BY mboxid", $user->uid);
  $counter = array();
  while ($item = db_fetch_object($result)) {
    $counter[$item->id] = $item->total;
  }
  foreach ($mailbox as $item) {
    if (!$counter[$item['id']]) {
      $counter[$item['id']] = 0;
    }
  }
  return $counter;
}

function _basic_webmail_check_internal_email($fid = 1) {
  Global $user;
  $result = db_result(db_query("SELECT GROUP_CONCAT(`mid` SEPARATOR  ',' ) msgid 
                                FROM {basic_webmail_messages} 
                                WHERE  user_id =%d AND mboxid=%d AND msubject LIKE '[QLVB-Email]%'",$user->uid,$fid));
  if (!$result) {
    variable_set('basic_webmail_fake_messages', array());
    return array();
  }
  $result = explode(',', $result);
  $fake_message = variable_get('basic_webmail_fake_messages', array());  
  if(!empty($fake_message)){
     $result = array_diff($result, $fake_message);
  }
  return $result;
  
}

/**
 * Connect to the mail server.
 * truongnx 06/03/2012
 * @param folder
 *   The name of the folder to open. If no folder is specified, the default
 *   of INBOX is used.
 *
 * @return   
 *   The imap_mail object , if successful, or FALSE if not.
 */
function _basic_webmail_open_connect($folder = 'INBOX') {
  global $user;
  //check the username and password for connection
  if (!$user->basic_webmail_username || !$user->basic_webmail_passsword) {
    user_access('administer basic_webmail') ?
                    watchdog('basic_webmail', 'Your !admin_settings_link have not yet been configured. Please do that before checking your e-mail.', array('!admin_settings_link' => l('mail settings', 'user/' . $user->uid . '/edit')), WATCHDOG_ERROR) :
                    watchdog('basic_webmail', 'Your mail settings have not been configured yet. Please do that before checking your e-mail.', WATCHDOG_ERROR);
    return FALSE;
  }
  //check the server address and server port
  if (variable_get('basic_webmail_imap_server', '') == '' || variable_get('basic_webmail_imap_port', '') == '') {
    user_access('administer basic_webmail') ?
                    watchdog('basic_webmail', 'The !server_settings for Basic webmail have not yet been configured. Please do that before checking your e-mail.', array('!server_settings' => l('server settings', 'admin/settings/basic_webmail')), WATCHDOG_ERROR) :
                    watchdog('basic_webmail', 'The server settings for Basic webmail have not yet been configured. Please do that before checking your e-mail.', WATCHDOG_ERROR);
    return FALSE;
  }
  // Get the users e-mail login and password.
  $username = $user->basic_webmail_username;
  $password = $user->basic_webmail_passsword;
  $server_address = variable_get('basic_webmail_imap_server', '');
  $server_port = variable_get('basic_webmail_imap_port', '');
  $imap_flags = '';
  if (variable_get('basic_webmail_secure_log_in', 0) == 1) {
    $imap_flags .= '/secure';
  }
  if (variable_get('basic_webmail_use_ssl', 0) == 1) {
    $imap_flags .= '/ssl';
  }
  if (variable_get('basic_webmail_validate_cert', 0) == 1) {
    $imap_flags .= '/validate-cert';
  } else {
    $imap_flags .= '/novalidate-cert';
  }
  if (variable_get('basic_webmail_use_tls', 0) == 1) {
    $imap_flags .= '/tls';
  } else {
    $imap_flags .= '/notls';
  }

  $obj_imap_mail = new imap_mail();
  $obj_imap_mail->set_timeout(IMAP_OPENTIMEOUT, 20);
  
  if ($obj_imap_mail->connect($username, $password, $server_address, $server_port, $folder, $imap_flags)) {
    return $obj_imap_mail;
  }
  $last_error = imap_last_error();
  watchdog('basic_webmail', 'There was an error connecting to mail server: !last_error', array('!last_error' => $last_error), WATCHDOG_ERROR);
  return FALSE;
}

/**
 * 
 * Enter description here ...
 * @param unknown_type $message_id
 */
function _basic_webmail_create_attach_folder($mid) {
  // Create the destination path variable, along with creating any necessary
  // directories.
  global $user;
  $file_dest = variable_get('basic_webmail_attachment_location', file_directory_path() . '/attachments');
  $file_dest .= '/' . $user->name . '/' . $mid;
  foreach (explode('/', $file_dest) as $dir) {
    $dirs[] = $dir;
    $path = file_create_path(implode($dirs, '/'));
    if (!field_file_check_directory($path, FILE_CREATE_DIRECTORY)) {
      watchdog('basic_webmail', 'Basic Webmail failed to create directory (%d).', array('%d' => $path), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  return $file_dest;
}

//  End of _basic_webmail_create_attach_folder.
/**
 * 
 * Check a email whether come from our system or not
 * @param mail body  $data
 * @param Email of sender  $sender
 * @return node data
 * @author truongnx.ithut@gmail.com
 */
function _basic_webmail_in_system($data, $sender) {
  if (!preg_match('/<div\s*id=\'signature\'\s*title=\'([a-f0-9]{40})\'>\s*<\/div>/', $data, $match)) {
    return FALSE;
  }
  $signature = $match [1];
  if (!preg_match('/<div\s*id=\'incoming_document\'\s*title=\'([a-f0-9]{40})\'>\s*<\/div>/', $data, $match)) {
    return FALSE;
  }
  $integrity = $match [1];
  //verify sender come from our system by email
  $hash_email = sha1(md5(SIGN_KEY) . $sender);
  if ($signature != $hash_email) {
    return FALSE;
  }
  //integrity graduate of data
  if (!preg_match('/<table\s*id=\'003_vanbanden\'>.*<\/table>/s', $data, $match)) {
    return FALSE;
  }
  $raw_data = $match [0];
  $raw_data = preg_replace('/[\x20\x09\x0a\x0d]+/', '', $raw_data);
  $hash_data = sha1(md5(ICOM_DOC_KEY) . $raw_data);
  if ($integrity != $hash_data) {
    return FALSE;
  }
  if (!preg_match('/<td\s*id=\'title\'\s*>(.*)<\/td>/', $data, $match)) {
    return FALSE;
  }
  $title = $match [1];
  if (!preg_match('/<td\s*id=\'field_003_loaivbd\'\s*title=\'([\d]{0,4})\'>.*<\/td>/', $data, $match)) {
    return FALSE;
  }
  $loaivbd = $match [1];
  if (!preg_match('/<td\s*id=\'field_003_sokyhieu\'\s*>(.*)<\/td>/', $data, $match)) {
    return FALSE;
  }
  $sokyhieu = $match [1];
  if (!preg_match('/<td\s*id=\'field_003_nam\'\s*>\s*([\d]{4})\s*<\/td>/', $data, $match)) {
    return FALSE;
  }
  $nam = $match [1];
  return array('title' => $title,
      'field_003_loaivbd' => $loaivbd,
      'field_003_sokyhieu' => $sokyhieu,
      'field_003_nam' => $nam);
}

/**
 * 
 * create field : fileganvbd of 003_vanbanden type
 * @param unknown_type $filepath
 * @param unknown_type $node
 * @author truongnx.ithut@gmail.com
 */
function _basic_webmail_create_field_fileganvbd($filepath, $node) {
  Global $user;
  //create new file object
  $file = new stdClass();
  $file->uid = $user->uid;
  $file->filename = basename($filepath);
  $file->origname = basename($filepath);
  $file->filepath = $filepath;
  $file->filesize = filesize($filepath);
  $file->filemime = module_exists('mimedetect') ? mimedetect_mime($file) : file_get_mimetype($file->filename);
  // Rename potentially executable files, to help prevent exploits.
  if (preg_match('/\.(php|pl|py|cgi|asp|js|aspx|jsp)$/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
    $file->filemime = 'text/plain';
    $file->filepath .= '.txt';
    $file->filename .= '.txt';
  }

  //load field_file patht settings
  $settings = db_fetch_array(db_query("SELECT * FROM {filefield_paths} WHERE type = '%s' AND field = '%s'", $node->type, 'field_003_fileganvbd'));
  $settings ['filename'] = unserialize($settings ['filename']);
  $settings ['filepath'] = unserialize($settings ['filepath']);
  //Process filename
  $new_filename = $file->filepath;
  if ($settings ['filename'] ['value'] != '') {
    $new_filename = $settings ['filename'] ['value'];
    $new_filename = filefield_paths_process_string($new_filename, 'node', $node, $settings ['filename']);
    $new_filename = filefield_paths_process_string($new_filename, 'field', array(0 => (array) $file), $settings ['filename']);
  }
  //Process filepath
  $new_path = filefield_paths_process_string(file_directory_path() . '/' . $settings ['filepath'] ['value'] . '/' . $new_filename, 'node', $node, $settings ['filepath']);
  $new_path = filefield_paths_process_string($new_path, 'field', array(0 => (array) $file), $settings ['filepath']);
  $destination = file_destination($new_path, FILE_EXISTS_RENAME);
  //check directory
  $dest = field_file_strip_path(dirname($destination));
  foreach (explode('/', $dest) as $dir) {
    $dirs[] = $dir;
    $path = file_create_path(implode($dirs, '/'));
    if (!field_file_check_directory($path, FILE_CREATE_DIRECTORY)) {
      watchdog('basic_webmail', 'Basic Webmail failed to create directory (%d).', array('%d' => $path), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  //copy file
  if (!file_copy($file, $destination, FILE_EXISTS_RENAME)) {
    watchdog('basic_webmail', ' Could not copy file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $destination));
    return NULL;
  }
  // If we made it this far it's safe to record this file in the database.
  $file->status = FILE_STATUS_PERMANENT;
  $file->timestamp = time();
  // Insert new record to the database.
  drupal_write_record('files', $file);
  return (array) $file;
}

/**
 * Converts UTF8 encoded strings.
 * This function is necessary, because there is a bug in some versions of PHP
 * that returns strings converted with the imap_utf8() function in all upper
 * case letters.  http://bugs.php.net/bug.php?id=44098
 * This function was taken from here and modified:
 * http://us2.php.net/manual/en/function.imap-utf8.php#92026
 */
function _basic_webmail_decode_mime_str($string, $char_set = 'UTF-8') {
  $new_string = '';
  $elements = imap_mime_header_decode($string);
  for ($i = 0; $i < count($elements); $i++) {
    if ($elements[$i]->charset == 'default') {
      $elements[$i]->charset = 'utf-8';
    }
    $new_string .= iconv($elements[$i]->charset, $char_set, $elements[$i]->text);
  }
  return $new_string;
}

//  End of _basic_webmail_decode_mime_str().

function _basic_webmail_gmt_second($stamp, $tzc) {
  /* date couldn't be parsed */
  if ($stamp == -1) {
    return -1;
  }
  /* timezone correction, expressed as `shhmm' */
  switch ($tzc) {
    case 'Pacific':
    case 'PST':
      $tzc = '-0800';
      break;
    case 'Mountain':
    case 'MST':
    case 'PDT':
      $tzc = '-0700';
      break;
    case 'Central':
    case 'CST':
    case 'MDT':
      $tzc = '-0600';
      break;
    case 'Eastern':
    case 'EST':
    case 'CDT':
      $tzc = '-0500';
      break;
    case 'EDT':
      $tzc = '-0400';
      break;
    case 'GMT':
      $tzc = '+0000';
      break;
    case 'BST':
    case 'MET':
    case 'CET':
      $tzc = '+0100';
      break;
    case 'EET':
    case 'IST':
    case 'MET DST':
    case 'METDST':
    case 'CEST':
    case 'MEST':
      $tzc = '+0200';
      break;
    case 'HKT':
      $tzc = '+0800';
      break;
    case 'JST':
    case 'KST':
      $tzc = '+0900';
      break;
  }
  $neg = false;
  if (substr($tzc, 0, 1) == '-') {
    $neg = true;
  } else if (substr($tzc, 0, 1) != '+') {
    $tzc = '+' . $tzc;
  }
  $hh = substr($tzc, 1, 2);
  $mm = substr($tzc, 3, 2);
  $iTzc = ($hh * 60 + $mm) * 60;
  if ($neg)
    $iTzc = -1 * (int) $iTzc;
  /* stamp in gmt */
  $stamp -= $iTzc;
  /** now find what the server is at * */
  $current = date('Z', time());
  /* stamp in local timezone */
  $stamp += $current;
  return $stamp;
}

/**
 * Decodes a RFC 822 Date-header into a timestamp
 *
 * @param array dateParts the Date-header split by whitespace
 * @return int the timestamp calculated from the header
 * @author SquireMail
 */
function _basic_webmail_get_timestamp($dateParts) {
  /** $dateParts[0] == <day of week>   Mon, Tue, Wed
   * * $dateParts[1] == <day of month>  23
   * * $dateParts[2] == <month>         Jan, Feb, Mar
   * * $dateParts[3] == <year>          1999
   * * $dateParts[4] == <time>          18:54:23 (HH:MM:SS)
   * * $dateParts[5] == <from GMT>      +0100
   * * $dateParts[6] == <zone>          (EDT)
   * *
   * * NOTE:  In RFC 822, it states that <day of week> is optional.
   * *        In that case, dateParts[0] would be the <day of month>
   * *        and everything would be bumped up one.
   * */
  if (count($dateParts) < 2) {
    return -1;
  } else if (count($dateParts) == 3) {
    if (substr_count($dateParts[0], '-') == 2 &&
            substr_count($dateParts[1], ':') == 2) {
      //  dd-Month-yyyy 23:19:05 +0200
      //  redefine the date
      $aDate = explode('-', $dateParts[0]);
      $newDate = array($aDate[0], $aDate[1], $aDate[2], $dateParts[1], $dateParts[2]);
      $dateParts = $newDate;
    }
  }

  /*
   * Simply check to see if the first element in the dateParts
   * array is an integer or not.
   * Since the day of week is optional, this check is needed.
   */
  if (!is_numeric(trim($dateParts[0]))) {
    /* cope with broken mailers that send "Tue,23" without space */
    if (preg_match('/^\w+,(\d{1,2})$/', $dateParts[0], $match)) {
      /* replace Tue,23 with 23 */
      $dateParts[0] = $match[1];
    } else {
      /* just drop the day of the week */
      array_shift($dateParts);
    }
  }
  /* calculate timestamp separated from the zone and obs-zone */
  $stamp = strtotime(implode(' ', array_splice($dateParts, 0, 4)));
  if (!isset($dateParts[0])) {
    $dateParts[0] = '+0000';
  }

  if (!preg_match('/^[+-]{1}[0-9]{4}$/', $dateParts[0])) {
    /* zone in obs-zone format */
    if (preg_match('/\((.+)\)/', $dateParts[0], $regs)) {
      $obs_zone = $regs[1];
    } else {
      $obs_zone = $dateParts[0];
    }
    return _basic_webmail_gmt_second($stamp, $obs_zone);
  } else {
    return _basic_webmail_gmt_second($stamp, $dateParts[0]);
  }
}



function _basic_webmail_get_email($str) {
  $name = '\s*(.*)\s*';
  $emailPatterns = '[a-zA-Z0-9_\-\.]+@[a-zA-Z0-9_\-\.]+[a-zA-Z]{2,4}';
  if (preg_match("/$name<\s*($emailPatterns)\s*>/", $str, $match)) {
    return array('name' => $match[1], 'email' => $match[2]);
  } elseif (preg_match("/\s*$emailPatterns\s*/", $str, $match)) {
    return array('name' => '', 'email' => $match[0]);
  }
  return FALSE;
}

function _basic_webmail_all_email($str) {
  /*   
  if (preg_match_all("/$user@$domain/", $str, $m)) {
    return $m[0];
  }*/
  $result=array(); 
  $arr=  explode(',', $str);
  $default_domain=  variable_get('basic_webmail_default_domain', '');  
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';  
  foreach ($arr as $item){      
      if(preg_match("/$user@$domain/", $item, $m) || 
         preg_match("/$user@$domain/",  sprintf("%s@%s",trim($item),$default_domain), $m)){          
         $result[]=$m[0];           
      }      
  } 
  return $result;
}

/**
 * 
 * Enter description here ...
 * @param node $node
 */
function _basic_webmail_create_body($node) {
  global $user;
  //get loáº¡i vÄn báº£n
  $loaivb ['id'] = $node->field_004_loaivanbandi [0] ['value'];
  $content_field = content_fields('field_004_loaivanbandi');
  $allowed_values = content_allowed_values($content_field);
  $loaivb ['value'] = $allowed_values [$loaivb ['id']];
  //create mail body
  $str = "<table id='003_vanbanden'>
<tr>
	<td>TrÃ­ch yáº¿u</td>
	<td id='title'>$node->title</td>
</tr>
<tr>
	<td>Loáº¡i vÄn báº£n </td>
	<td id='field_003_loaivbd' title='" . $loaivb ['id'] . "'>" . $loaivb ['value'] . "</td>
</tr>
<tr>
	<td>Sá» kÃ½ hiá»u Äáº¿n </td>
	<td id='field_003_sokyhieu'>" . sprintf("%s/%s",$node->field_004_sovanban[0]['value'], $node->field_004_kyhieuvbdi [0] ['value']) . "</td>
</tr>
<tr>
	<td>NÄm </td>
	<td id='field_003_nam'>2012</td>
</tr>
</table>";

  $hash_email = sha1(md5(SIGN_KEY) . $user->basic_webmail_username);
  $raw_data = preg_replace('/[\x20\x09\x0a\x0d]+/', '', $str);
  $hash_data = sha1(md5(ICOM_DOC_KEY) . $raw_data);

  $body = "<div id='signature' title='$hash_email'></div>\n";
  $body .= "<div id='incoming_document' title='$hash_data'></div>\n";
  $body .= $str;
  return $body;
}



// Get shorten string.
function _basic_webmail_shorten_string($string)
{
  $string=  basic_webmail_clean_file_name($string);
  $string=  preg_replace('/(\s)+/','${1}', trim($string));
  if(preg_match_all('/(\s|^)(\w{1})/', $string,$m)){
    return strtolower(implode("", $m[2]));
  }
  return NULL;
}
/**
 * Clean fileName for security reasons 
 */
function basic_webmail_clean_file_name($file_name){
  // Clean the fileName for security reasons
  if (module_exists('transliteration')) {
    $file_name = transliteration_clean_filename($file_name);
  }
  else {
    $file_name = preg_replace('/[^\w\._]+/', '', $file_name);
  }
  return $file_name;
}