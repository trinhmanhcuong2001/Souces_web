<?php
/**
 * Contact popup select 
 * @author truongnx at gmail dot com
 */
/**
* Implementation of hook_menu().
*/
function contact_select_menu() {
  $items = array();
  
  $items['admin/settings/contact-select'] = array(
    'title' => 'Contact select popup',
    'description' => 'Configure the Contact select module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contact_select_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer contact select'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['contact_select/popup-select'] = array(
    'title' => 'Chọn đơn vị',
    'access callback' => TRUE,
    'page callback' => 'contact_select_popup',
    'type' => MENU_CALLBACK,
  );  
   $items['contact_select/add_more'] = array(
    'title' => 'AJAX modal dialog',
    'access callback' => TRUE,
    'page callback' => 'contact_select_add_more',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}
/**
 * Implementation of hook_perm().
 */
function contact_select_perm() {
  return array('contact select show group', 'administer contact select');
}

/**
 *Admin setting pages
 * @return type 
 */
function contact_select_admin_settings() {
  // Figure out which content types have a filefield.
  $content_field = content_fields('field_009_nhom');
  $available = content_allowed_values($content_field);    
  // Show which fielfield should be create content type
  if (!empty($available)) {
      $form['contact_select_group'] = array(
        '#type' => 'checkboxes',        
        '#multicolumn' => array('width' => 3),
        '#title' => t('Chọn những nhóm sẽ hiển thị trên popup chọn đơn vị'),
        '#default_value' => variable_get('contact_select_group', array()),
        '#options' => $available,
        '#description' => t('Users with the <em>administer nodes</em> permission will be able to override these options.'),
      );       
  }
   else {
    $form['error_state'] = array(
      '#value' => t('You must enable a group'),
    );
  }
  return system_settings_form($form);
}
/**
 * Lấy những field sẽ invoke contact_select
 * @return type 
 */
function _contact_select_get_fields(){
    return array(
        '004_vanbandi'=> array(
                        //'field_004_dvnhanvb',
                        'field_004_dvnhanemail',
                        ),
        
    );
}

/*
 * Implementation of hook_elements().
 */
function contact_select_elements() {    
 return array(
    'checkboxes' => array(     
      '#process' => array('contact_select_element_process'),
    )
 );
}
/**
 * Remove uncheck contact
 * @param type $element
 * @param type $edit
 * @param type $form_state
 * @param type $form
 * @return type 
 */
function contact_select_element_process($element, $edit, &$form_state, $form){
    $select_field=_contact_select_get_fields();
    $node_type=$form['type']['#value'];
    if(is_array($select_field[$node_type]) && in_array($element['#parents'][0],$select_field[$node_type])){    
        foreach ($element['#options'] as $key => $item){
            if(!isset($element['#value'][$key])){
                unset($element[$key]);
                unset($element['#options'][$key]);
            }
        }         
    }
    return $element;
}
/**
 * Implementation of hook_form_alter().
 */
function contact_select_form_alter(&$form, &$form_state, $form_id) {    
    $select_field=_contact_select_get_fields();
    $type_name=array_keys($select_field);
    foreach ($type_name as $item){
        if ($form_id == $item . '_node_form') {
            $form['#after_build'][] = 'contact_select_after_build';
            return;
        }
    }   
}
/**
 * Add popup link to field
 * @param type $form
 * @param type $form_state
 * @return string 
 */
function contact_select_after_build($form, &$form_state){   
  ctools_include('ajax'); // Module  include the dependence it needs for ajax.
  ctools_include('modal');
  ctools_modal_add_js();
  //modal style  
  $contact_style = array(
    'contact-select-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 700,
        'height' => 500,
        'addWidth' => 20,
        'addHeight' => 15,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CToolsSampleModal',
      'throbber' => theme('image', ctools_image_path('ajax-loader.gif', 'contact_select'), t('Đang tải...'), t('Đang tải')),
      'closeText' =>'Đóng lại [x]',
    ),
  );

  drupal_add_js($contact_style, 'setting');
  ctools_add_js('contact_select', 'contact_select');
  ctools_add_css('contact_select', 'contact_select');
  //end of modal style
  $node_type=$form['type']['#value'];
  $select_field=_contact_select_get_fields();
 
 
  if(is_array($select_field[$node_type])){
      $default_value=array();
      foreach ($select_field[$node_type] as $field_name){
          $group_name=db_result(db_query("SELECT group_name FROM {". fieldgroup_fields_tablename() ."} WHERE type_name = '%s' AND field_name = '%s'", $node_type, $field_name));
          $field_info=  content_fields($field_name,$node_type);
          $lable='» Chọn '.$field_info['widget']['label'];
          $output = ctools_modal_text_button(t($lable), 'contact_select/popup-select/' .$node_type . '/' .  $field_name, t($lable),'ctools-modal-contact-select-style'); 
          if($group_name){
              $form[$group_name][$field_name]['#prefix']='<div id="contact-popup-selection-' .$field_name. '">';      
              $form[$group_name][$field_name]['#suffix']='</div>' . $output; 
              if($form['nid']['#value']){
                $default_value[$field_name]= $form[$group_name][$field_name]['nid']['#value']['nid'];                
              }
              
          }else{
              $form[$field_name]['#prefix']='<div id="contact-popup-selection' .$field_name. '">';      
              $form[$field_name]['#suffix']='</div>' . $output; 
              if($form['nid']['#value']){
                $default_value[$field_name]= $form[$field_name]['nid']['#value']['nid'];        
              }
          }            
      }
      variable_set('contact_select_default_value',$default_value);      
  } 
  ctools_include('plugins');   
  
  return $form;
}

/**
 * Popup form.
 * @param type $field_name 
 */

function contact_select_popup($type_name,$field_name)
{  
  
  ctools_include('ajax');
  ctools_include('modal');  
  $form_state = array(
                    'ajax' => TRUE,
                    'field_name'=>$field_name,
                ); 
  //Set title
  $field_info=  content_fields($field_name,$node_type);
  drupal_set_title('» Chọn '.$field_info['widget']['label']);
  // End of set title
  $output = ctools_modal_form_wrapper('contact_select_form', $form_state);
  if (!$output) {     
    module_load_include('inc', 'content', 'includes/content.node_form');
    $contactid=array();
    // Auto complete value
    foreach ($form_state['input']['contact'] as $item){
        if(preg_match('/^(?:\s*|(.*) )?\[\s*nid\s*:\s*(\d+)\s*\]$/', $item, $matches)){
             list(, $title, $nid) = $matches;
             $contactid[]=$nid;
        }
       
    }
    //checkboxes value
    foreach ($form_state['input']['nid'] as $item){
        $contactid= array_merge($contactid,$item);
        
    }    
    $contactid=  array_unique($contactid);
    // re-build field
    $field = content_fields($field_name,$type_name);
    $form = array();
    $form['type']['#value']=$type_name;
    $form_state = array('storage' => NULL, 'submitted' => FALSE);
    $form += (array) content_field_form($form, $form_state, $field);
    $form[$field_name]['#value']=  array_map('_contact_select_field_value',$contactid);
    $$form[$field_name]['#parents'][0]=$field_name;
    $form['#field_info'][$field_name] = $field;
    $form['#type'] = 'form';
    $form['#programmed']=true;
    $form['#after_build'][] = 'checkall_form_after_build';
    drupal_process_form('contact_select', $form, $form_state);
    $source = drupal_render($form[$field_name]);
    $output = array();
    $output[] = ctools_ajax_command_replace('#contact-popup-selection-' .$field_name,  '<div id="contact-popup-selection-' .$field_name. '">' . $source . '</div>');
    $output[] = ctools_modal_command_dismiss();
  }
  ctools_ajax_render($output);
}

/**
 * Popup select form
 * @param type $form_state
 * @return string 
 */
function contact_select_form(&$form_state) {         
  $group=variable_get('contact_select_group', array());  
  $placeholder = db_placeholders($group, 'int');
  $result=  db_query("SELECT d.nid, d.field_009_ten_value, d.field_009_nhom_value
                      FROM {content_type_009_danhba} d 
                      WHERE  d.field_009_nhom_value IN ($placeholder)
                      ORDER BY d.field_009_nhom_value",$group);
  $options=array();
  while ($contact = db_fetch_object($result)) {      
      $options[$contact->field_009_nhom_value][$contact->nid]=$contact->field_009_ten_value;
  }
  $form['contact_select'] = array(    
    '#type' => 'markup',
    '#value' =>'Chọn đơn vị bằng cách tìm đơn vị :',
    );
  // Autocomplete 
  $form['contact'] = array(              
                        '#title' => t('Ðơn vị'),  
                        '#prefix' => '<div id="contact-wraper">',
                        '#suffix' => '</div>',
                     );
  
  if (isset($form_state['post']['contact'])) {     
    // 'Refresh' button on the page following 'Add more' submission was clicked
    $item_count = count($form_state['post']['contact']);
    $item_count++;
  }
  else {
    $item_count = 2;
  }
  for ($i = 0; $i < $item_count; $i++) {
    $item = $form_state['post']['contact'][$i];   
    $form['contact'][$i] = array(
                        '#tree' => TRUE,
                        '#type' => 'textfield',
                        '#multiple' => TRUE,
                        '#default_value' => $item,                         
                        '#columns' => Array( 0 => 'nid'),  
                        '#autocomplete_path' => 'nodereference/autocomplete/field_004_dvnhanemail',
                        '#name' => 'contact[' . $i .']',                                         
                     );
  }
 
   $form['add_more'] = array(
      '#type' => 'submit',
      '#name' => 'add_more',
      '#value' => t('Add another item'),
      
      // Submit callback for disabled JavaScript. drupal_get_form() might get
      // the form from the cache, so we can't rely on content_form_alter()
      // including this file. Therefore, call a proxy function to do this.
      '#submit' => array('content_add_more_submit_proxy'),
      '#ahah' => array(
        'path' => 'contact_select/add_more',
        'wrapper' =>'contact-wraper',
        'method' => 'replace',
        'effect' => 'fade',
       ),       
    );
  //End of autocomplete  
  // Checkbox selection  
  $default_value=variable_get('contact_select_default_value',array());   
  $content_field = content_fields('field_009_nhom');
  $allowed_values = content_allowed_values($content_field);  
  
  foreach($options as $group => $item){        
    $form[$group] = array(
            '#type' => 'fieldset',
            '#title' => t('Nhóm ' . $allowed_values[$group] ),
            '#collapsible' => TRUE, 
            '#collapsed' => TRUE,
    );
    $form[$group]['nid['.$group.']']=array(
        '#type' => 'checkboxes',               
        '#multicolumn' => array('width' => 3),
        '#multiple' => TRUE,
        '#checkall' => TRUE,
        '#options' => $item,   
        
    );
    if(isset($default_value[$form_state['field_name']])){
        $form[$group]['nid['.$group.']']['#default_value']=$default_value[$form_state['field_name']];
    }
  }       
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Chọn'),
  );  
  return $form;
}


function contact_select_add_more(){
    include_once 'modules/node/node.pages.inc';
    $form_state = array('storage' => NULL, 'submitted' => FALSE);
    $form_build_id = $_POST['form_build_id'];   
    // Get the form from the cache.
    $form = form_get_cache($form_build_id, $form_state);
    $args = $form['#parameters'];
    $form_id = array_shift($args);
    // We will run some of the submit handlers so we need to disable redirecting.
    $form['#redirect'] = FALSE;
    // We need to process the form, prepare for that by setting a few internals
    // variables.
    $form_state['post'] = $form['#post'] = $_POST;
    $form['#programmed'] = FALSE;
    drupal_process_form($form_id, $form, $form_state);
    $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
    $contact = $form['contact'];
    unset($contact['#prefix'], $contact['#suffix']);   
    $output = drupal_render($contact);
    print drupal_to_js(array('status' => TRUE, 'data' => $output));
    exit;
    
}
/**
 *
 * @param type $elemement 
 */
function _contact_select_field_value($nid){
    return array('nid'=>$nid);
}

?>